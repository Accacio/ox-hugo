#+HUGO_BASE_DIR: ../
#+SEQ_TODO: TODO DRAFT DONE
#+PROPERTY: header-args :eval no
#+MACRO: doc [[https://ox-hugo.scripter.co/doc/$1][$2]]

* Preparation
:PROPERTIES:
:EXPORT_FILE_NAME: prep
:EXPORT_DATE: 2017-07-12T17:05:38-04:00
:END:
1. Be the root directory for this Hugo site (the directory containing
   =config.toml=).
2. Run
  #+BEGIN_EXAMPLE
  hugo server --port 1111
  #+END_EXAMPLE
3. See the site served on "http://localhost:1111/".
* Post 1
:PROPERTIES:
:EXPORT_FILE_NAME: post-1
:EXPORT_DATE: 2017-07-12T17:31:56-04:00
:END:
Export this *first* post only by bringing point here and doing =M-x org-hugo-export-subtree-to-md=.
* Post 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-2
:END:
This post has no date.

Export this *second* post only by bringing point here and doing =M-x org-hugo-export-subtree-to-md=.
* Image                                                               :image:
** Image links
:PROPERTIES:
:EXPORT_FILE_NAME: image-links
:EXPORT_DATE: 2017-07-15T07:49:44-04:00
:END:
This is some text before the first heading of this post.
*** Unclickable image (works!)
[[/images/org-mode-unicorn-logo.png]]

-----
+To be fixed+ (*Now fixed*): The sub-headings in a post get exported as /Heading 1/
 instead of /Heading 2/.

For example, this sub-section's heading is exported as:
#+BEGIN_EXAMPLE
# Unclickable image
#+END_EXAMPLE
instead of
#+BEGIN_EXAMPLE
## Unclickable image
#+END_EXAMPLE

-----
*Solution*: Above is fixed by setting =HUGO_OFFSET_LEVEL= to 1.

So the sub-heading title and the post title both get the /Heading 1/
tag and look the same size.
*** Clickable link that opens the image (works!)
[[/images/org-mode-unicorn-logo.png][Click here to see the unicorn]]
*** Clickable image that opens the image (works!)
Click below image to jump to the unicorn image.
[[file:/images/org-mode-unicorn-logo.png][file:/images/org-mode-unicorn-logo.png]]

- NOTE :: =file:= has to be used in both Link and Description components
          of the Org link.
*** Link to image outside of standard Hugo =static= directory
[[../files-to-be-copied-to-static/static/images/copy-of-unicorn-logo.png]]

If you link to files outside of the Hugo =static= directory, ensure
that the path contains =/static/= if you would like to preserve the
directory structure.

Example translations between outside =static= directory paths to the
copied location inside =static=:
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------|
| Outside =static=                 | Copied-to location inside =static=        | Explanation                                                                                                          |
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------|
| =~/temp/static/images/foo.png=   | =<HUGO_BASE_DIR>/static/images/foo.png=   | If the *outside* path has =/static/= in it, the directory structure after that is preserved when copied.             |
| =~/temp/static/img/foo.png=      | =<HUGO_BASE_DIR>/static/img/foo.png=      | (same as above)                                                                                                      |
| =~/temp/static/foo.png=          | =<HUGO_BASE_DIR>/static/foo.png=          | (same as above)                                                                                                      |
| =~/temp/static/articles/zoo.pdf= | =<HUGO_BASE_DIR>/static/articles/zoo.pdf= | (same as above)                                                                                                      |
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------|
**** Source path does not contain =/static/=
[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]]
|--------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| Outside =static=         | Copied-to location inside =static=       | Explanation                                                                                                           |
|--------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =~/temp/bar/baz/foo.png= | =<HUGO_BASE_DIR>/static/ox-hugo/foo.png= | Here, as the *outside* path does not have =/static/=, the file is copied to the =ox-hugo/= dir in Hugo =static/= dir. |
|--------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
- Note :: The =ox-hugo= sub-directory name is because of the default
          value of
          =org-hugo-default-static-subdirectory-for-externals=.
** Image captions
:PROPERTIES:
:EXPORT_DATE: 2017-07-19
:EXPORT_FILE_NAME: image-captions
:CUSTOM_ID: image-captions
:END:
Some text before image.
#+CAPTION: A unicorn!
[[/images/org-mode-unicorn-logo.png]]
Some more text, after image.
** Image with Hugo =figure= shortcode parameters set using =ATTR_HTML=
:PROPERTIES:
:EXPORT_FILE_NAME: figure-shortcode-and-attr-html
:END:
[[https://github.com/kaushalmodi/ox-hugo/issues/17][Issue # 17]]
*** Setting =class= parameter
#+ATTR_HTML: :class inset
[[/images/org-mode-unicorn-logo.png]]

[[https://github.com/kaushalmodi/ox-hugo/issues/17#issuecomment-313627728][Discussion]]
**** COMMENT Below will not work!
You cannot wrap markdown code inside HTML.

As /rdwatters/ says [[https://discourse.gohugo.io/t/is-it-possible-to-insert-html-code-in-markdown-content/4867/4?u=kaushalmodi][here]],
#+BEGIN_QUOTE
HTML can be part of markdown because HTML-inside-markdown is part of
the spec. That said, remember that the spec disallows markdown nested
inside of HTML. So if you create a div, just make sure everything
inside that div is valid HTML.
#+END_QUOTE

#+BEGIN_EXPORT md
<div class="inset">
#+END_EXPORT
[[/images/org-mode-unicorn-logo.png]]
#+BEGIN_EXPORT md
</div>
#+END_EXPORT
*** Setting =alt= parameter
[[https://www.reddit.com/r/emacs/comments/71wy6n/orgmode_as_a_markup_language_does_make_sense_even/dnhqudn/][Reference]]
#+ATTR_HTML: :alt Org-mode Unicorn Logo
[[/images/org-mode-unicorn-logo.png]]
*** Setting =title= parameter
#+ATTR_HTML: :title Logo
[[/images/org-mode-unicorn-logo.png]]
*** Setting image caption
The image caption can be set in two ways.
1. Using the Org =#+CAPTION= keyword
2. Using =#+ATTR_HTML: :caption my caption=

The =#+CAPTION= is available will get the higher precedence. In the
below image, caption is set using that:

#+INCLUDE: "./all-posts.org::#image-captions" :only-contents t

Below, the same caption is set using the =#+ATTR_HTML= method instead:

Some text before image.
#+ATTR_HTML: :caption A unicorn!
[[/images/org-mode-unicorn-logo.png]]
Some more text, after image.
*** Setting image size
**** Setting =:width= parameter
The image [[https://www.w3schools.com/tags/att_img_width.asp][width]] can be specified in *pixels* using the =:width=
parameter. *The height of the image will be resized proportionally.*

Below image is shown 50 pixels wide.
#+ATTR_HTML: :width 50
[[/images/org-mode-unicorn-logo.png]]

Below image is shown 100 pixels wide.
#+ATTR_HTML: :width 100
[[/images/org-mode-unicorn-logo.png]]

Below image is shown with a width of 1000 pixels! Now the size of this
image is 200px × 200px. But the image will still show up in 1000px ×
1000px size, but obviously heavily pixelated!

#+ATTR_HTML: :width 1000
[[/images/org-mode-unicorn-logo.png]]
**** Setting =:height= parameter
*NOTE*: Support for specifying =height= parameter to the Hugo =figure=
 shortcut was only added recently in [[https://github.com/gohugoio/hugo/pull/4018][hugo PR #4018]]. So setting this
 parameter will need *hugo v0.31* or later.

-----

The image [[https://www.w3schools.com/tags/att_img_height.asp][height]] can be specified in *pixels* using the =:height=
parameter. *The weight of the image will be resized proportionally.*

Below image is shown 50 pixels tall.
#+ATTR_HTML: :height 50
[[/images/org-mode-unicorn-logo.png]]

Below image is shown 100 pixels tall.
#+ATTR_HTML: :height 100
[[/images/org-mode-unicorn-logo.png]]

Below image is shown with a height of 1000 pixels! Now the size of
this image is 200px × 200px. But the image will still show up in
1000px × 1000px size, but obviously heavily pixelated!

#+ATTR_HTML: :height 1000
[[/images/org-mode-unicorn-logo.png]]
**** Setting both =:width= and =:height=
The *NOTE* above applies here too.. needs *hugo v0.31* or later.

The figure sizes below are intentionally set /mis-proportionally/ just
for testing.
- =:width 100 :height 200=
  #+ATTR_HTML: :width 100 :height 200
  [[/images/org-mode-unicorn-logo.png]]
- =:width 200 :height 100=
  #+ATTR_HTML: :width 200 :height 100
  [[/images/org-mode-unicorn-logo.png]]
*** Multiple =ATTR_HTML=
Below in Org source:
#+BEGIN_SRC org
#+HTML: <style>.foo img { border:2px solid black; }</style>
#+ATTR_HTML: :alt Go is fine though.
#+ATTR_HTML: :width 300 :class foo
[[file:https://golang.org/doc/gopher/pkg.png]]
#+END_SRC

Rendered this:

#+HTML: <style>.foo img { border:2px solid black; }</style>
#+ATTR_HTML: :alt Go is fine though.
#+ATTR_HTML: :width 300 :class foo
[[file:https://golang.org/doc/gopher/pkg.png]]

*NOTE*: We cannot use =:style= in =#+ATTR_HTML= because Hugo does not
 /yet/ support a =style= argument in the =figure= shortcode
 [[[https://github.com/gohugoio/hugo/blob/488631fe0abc3667355345c7eb98ba7a2204deb5/tpl/tplimpl/template_embedded.go#L22-L37][Source]]].

So using =#+HTML: <style>.foo img ... </style>= and =#+ATTR_HTML: :class
 foo= as shown in the workaround above.
*** Other
Similarly, =:link=, =:attr=, =:attrlink= parameters in =#+ATTR_HTML=
are also supported to set the corresponding parameter in the Hugo
=figure= shortcode.
* Setting heading anchors
:PROPERTIES:
:EXPORT_FILE_NAME: setting-heading-anchors
:EXPORT_DATE: 2017-07-12T17:05:39-04:00
:END:
** Heading 1 of the post
:PROPERTIES:
:CUSTOM_ID: cool-ref-1
:END:
Something
*** Heading 1.1 of the post
:PROPERTIES:
:CUSTOM_ID: cool-ref-1.1
:END:
Something else
** Heading 2 of the post
:PROPERTIES:
:CUSTOM_ID: cool-ref-2
:END:
Something 2
*** Heading 2.1 of the post
:PROPERTIES:
:CUSTOM_ID: cool-ref-2.1
:END:
Something 2.1
* Post heading with crazy characters
:PROPERTIES:
:EXPORT_FILE_NAME: post-heading-slugs
:EXPORT_DATE: 2017-07-12T13:46:33-04:00
:END:
** Releasing version 1.1
** Foo ( Bar ) Baz
** (Foo)Bar.Baz&Zoo
** Hey! I have a link [[https://example.org][here]] (Awesome!)
** Este título es en español
** Non-English titles
*** ÂÊÎÔÛ
*** ÁÉÍÓÚÝ
*** ÀÈÌÒÙ
*** ÄËÏÖÜ
*** ÃÐÑÕÞ
*** Ç
** Headings with HTML
*** Checklist [1/3]
Above title would render to ~Checklist <code>[1/3]</code>~ in
Markdown.
**** DONE Item 1
Above would render to ~<span class="todo DONE_">DONE </span> Item 1~
in Markdown.
**** TODO Item 2
Above would render to ~<span class="todo TODO_">TODO </span> Item 2~
in Markdown.
**** TODO Item 3
Above would render to ~<span class="todo TODO_">TODO </span> Item 3~
in Markdown.
*** Version 0.1 <2017-10-11 Wed>
Above title would render to ~Version 0.1 <span
class="timestamp-wrapper"><span class="timestamp">&lt;2017-10-11
Wed&gt;</span></span>~ in Markdown.
* Title in Front Matter
** Awesome title with "quoted text"
:PROPERTIES:
:EXPORT_FILE_NAME: post-title-quotes
:EXPORT_DATE: 2017-07-24
:END:
Testing a post with double quotes in the title.
** Under_scores_in_title
:PROPERTIES:
:EXPORT_FILE_NAME: under-scores-in-title
:EXPORT_DATE: 2017-07-28
:END:
Ensure that the underscores in =title= string of front matter do not
get escaped.. =foo_bar= must not become =foo\_bar=.
* Description meta-data with "quoted text"
:PROPERTIES:
:EXPORT_FILE_NAME: post-description-quotes
:EXPORT_DESCRIPTION: Some description with "quoted text"
:EXPORT_DATE: 2017-07-24
:END:
Testing a post with double quotes in the description.
* Excluded post                                                    :noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: excluded-post
:END:
This post must not be exported as it is tagged =noexport=.
* COMMENT Commented post
:PROPERTIES:
:EXPORT_FILE_NAME: commented-post
:END:
This post must not be exported as it is commented.
* Section
** Articles
:PROPERTIES:
:EXPORT_HUGO_SECTION: articles
:END:
*** Article 1
:PROPERTIES:
:EXPORT_FILE_NAME: article-1
:EXPORT_DATE: 2017-07-19T08:34:29-04:00
:END:
First article.

This will land in =content/articles/= as the parent of this subtree
sets =EXPORT_HUGO_SECTION= to =articles=. Note that the theme needs to
define at least the =single.html=, either in the =layouts/_default/=
directory, or =layouts/articles/=, either in the Hugo base dir or the
theme dir.
*** Article 2
:PROPERTIES:
:EXPORT_FILE_NAME: article-2
:EXPORT_DATE: 2017-07-19T08:34:22-04:00
:END:
Second article.

This will also land in =content/articles/= the same way.
** Emacs posts                                                        :emacs:
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:END:
*** Emacs Post 1                                                        :foo:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-post-1
:EXPORT_DATE: 2017-07-12T17:31:56-04:00
:END:
Here is the first post on Emacs.
*** Emacs Post 2                                                        :bar:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-post-2
:EXPORT_DATE: 2017-07-12T17:31:56-04:00
:END:
Here is the second post on Emacs.
* Tables                                                              :table:
** Simple Table
:PROPERTIES:
:EXPORT_FILE_NAME: simple-table
:EXPORT_DATE: 2017-07-12T19:25:56-04:00
:END:
| h1 | h2 |
| a  | b  |
| c  | d  |
** Table with narrowest cols
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-narrowest-columns
:EXPORT_DATE: 2017-07-12T19:26:00-04:00
:END:
| 1 | 2 | 3 |
| a | b | e |
| c | d | f |
** Table with top border
:PROPERTIES:
:EXPORT_FILE_NAME: table-top-border
:EXPORT_DATE: 2017-07-12T19:26:04-04:00
:END:
|---+---+---+---|
| 1 | 2 | 3 | 4 |
| a | b | e | g |
| c | d | f | h |
** Table with bottom border
:PROPERTIES:
:EXPORT_FILE_NAME: table-bottom-border
:EXPORT_DATE: 2017-07-12T19:26:06-04:00
:END:
| 1 | 2 | 3 | 4 |
| a | b | e | g |
| c | d | f | h |
|---+---+---+---|
** Table with top and bottom border
:PROPERTIES:
:EXPORT_FILE_NAME: table-top-and-bottom-border
:EXPORT_DATE: 2017-07-12T19:26:10-04:00
:END:
|---+---+---+---|
| 1 | 2 | 3 | 4 |
| a | b | e | g |
| c | d | f | h |
|---+---+---+---|
** Table with rule after first row
:PROPERTIES:
:EXPORT_FILE_NAME: table-only-rule-after-first-row
:EXPORT_DATE: 2017-07-12T19:26:13-04:00
:END:
| 1 | 2 | 3 | 4 |
|---+---+---+---|
| a | b | e | g |
| c | d | f | h |
** Table with borders and rule after first
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-borders-and-rule-after-first
:EXPORT_DATE: 2017-07-12T19:26:16-04:00
:END:
|---+---+---+---|
| 1 | 2 | 3 | 4 |
|---+---+---+---|
| a | b | e | g |
| c | d | f | h |
|---+---+---+---|
** Table with single column
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-single-column
:END:
| h1 |
| a  |
| b  |
** Table with single row
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-single-row
:END:
| a | b |
** Table with single cell
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-single-cell
:END:
| a |
** Table column alignment
:PROPERTIES:
:EXPORT_FILE_NAME: table-column-alignment
:END:
*** Table with 3 rows
|             <r> | <l>                  |           |              <c>              |
|           Right | Left                 | No        |            Center             |
| Long Content To | Spread Out the Width | Alignment | Of the Table To See Alignment |
|           Right | Left                 | Marker    |            Center             |
*** Table with 2 rows
| <l>  |         |  <c>   |   <r> |
| Left | Default | Center | Right |
| 1    |       2 |   3    |     4 |
*** Table with 1 row
/A table with just 1 row with alignment markers is as good as just
that row without the alignment markers. But hey, a test is a test./

| <l>  |         |  <c>   |   <r> |
| Left | Default | Center | Right |
*** Table with 0 rows!
/A table with zero rows, with just alignment markers, doesn't make
sense. But hey, a test is a test./

| <l> |   | <c> | <r> |

You should see *no* table exported above.
* Source blocks                                                   :src_block:
** Code fence                                                    :code_fence:
*** Code-fenced source blocks (default behavior)
:PROPERTIES:
:EXPORT_FILE_NAME: code-fenced-src-blocks-default
:EXPORT_DATE: 2017-07-31
:END:
The source blocks are code-fenced by default.

#+INCLUDE: "./all-posts.org::#example-text-with-code-blocks" :only-contents t
-----
*It is necessary to set the Hugo site config variable
=pygmentsCodeFences= to =true= for syntax highlighting to work for
fenced code blocks.*
*** Code-fenced source blocks
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE: t
:EXPORT_FILE_NAME: code-fenced-src-blocks
:EXPORT_DATE: 2017-07-13T17:49:22-04:00
:END:
Here the source blocks are explicitly set to be code-fenced by setting
the =EXPORT_HUGO_CODE_FENCE= property to =t=.

#+INCLUDE: "./all-posts.org::#example-text-with-code-blocks" :only-contents t
-----
*It is necessary to set the Hugo site config variable
=pygmentsCodeFences= to =true= for syntax highlighting to work for
fenced code blocks.*
*** Code-fenced source blocks with backticks                      :backticks:
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE: t
:EXPORT_FILE_NAME: code-fenced-src-blocks-with-backticks
:END:
This code block contains a fenced code block with 4 backticks:
#+BEGIN_SRC md
````emacs-lisp
(message "Hello")
````
#+END_SRC

This code block contains a fenced code block with 3 backticks:
#+BEGIN_SRC md
```emacs-lisp
(message "Hello again")
```
#+END_SRC

This code block contains no backticks:
#+BEGIN_SRC emacs-lisp
(message "Hello again x2")
#+END_SRC

This code block again contains a fenced code block with 4 backticks:
#+BEGIN_SRC md
````emacs-lisp
(message "Hello again x3")
````
#+END_SRC

This code block contains a fenced code block with 6 backticks:
#+BEGIN_SRC md
``````emacs-lisp
(message "Hello again x4")
``````
#+END_SRC

This code block again contains a fenced code block with 3 backticks:
#+BEGIN_SRC md
```emacs-lisp
(message "Hello again x5")
```
#+END_SRC

This code block once again contains no backticks:
#+BEGIN_SRC emacs-lisp
(message "Hello again x6")
#+END_SRC
** Highlight Shortcode                                  :highlight:shortcode:
*** Source blocks with =highlight= shortcode
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE:
:EXPORT_FILE_NAME: highlight-shortcode-src-blocks
:EXPORT_DATE: 2017-07-31
:END:
Note that to disable the code fence option, the value portion of the
property needs to be left *empty* instead of setting to =nil=!
#+BEGIN_EXAMPLE
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE:
:END:
#+END_EXAMPLE
#+INCLUDE: "./all-posts.org::#example-text-with-code-blocks" :only-contents t
*** Source blocks with line number annotation
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-with-line-numbers
:END:
- [[http://orgmode.org/manual/Literal-examples.html][Org reference]]
- [[https://gohugo.io/content-management/syntax-highlighting/][Hugo =highlight= shortcode with line numbers]]
**** Cases
:PROPERTIES:
:CUSTOM_ID: source-block-line-number-cases
:END:
***** Default new line number start
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-n-default-start>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-default-start>>
#+END_SRC
***** Specify new line number start
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-n-custom-start>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-custom-start>>
#+END_SRC
***** Default continued line numbers
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-n-default-continue>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-default-continue>>
#+END_SRC
***** Specify continued line numbers jump
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-n-custom-continue>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-custom-continue>>
#+END_SRC
*** Source blocks with highlighting
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-with-highlighting
:CUSTOM_ID: source-blocks-with-highlighting
:END:
**** Without line numbers
:PROPERTIES:
:CUSTOM_ID: source-blocks-with-highlighting-no-linenums
:END:
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-hl-without-n>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-without-n>>
#+END_SRC
Above highlighting might look weird as the highlighting spans the full
page/container width. This could be either called a bug in Hugo, or
the HTML limitation.

A workaround is below.. *use line numbers too!*.
**** With line numbers *not* starting from 1
:PROPERTIES:
:CUSTOM_ID: source-blocks-with-highlighting-with-linenums-not-starting-from-1
:END:
With line numbers enabled, the highlighting is limited to the width of
the HTML table rows (because =ox-hugo= sets the =linenos=table= option
in the =highlight= shortcode when line numbers are enabled).

- Note 1 :: When using both, switches (like =-n=), and header args
            (like =:hl_lines=), the _switches have to come first_.
- Note 2 :: The line numbers in the value for =:hl_lines= parameter is
            always with the starting line number reference of 1. That
            has no relation with the value of the line numbers
            displayed using the =-n= or =+n= switches!
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-hl-with-n-not-1>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-with-n-not-1>>
#+END_SRC
**** With line numbers
:PROPERTIES:
:CUSTOM_ID: source-blocks-with-highlighting-with-linenums
:END:
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-hl-with-n>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-with-n>>
#+END_SRC
** Source block with caption                                       :noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-caption
:EXPORT_DATE: 2017-07-19
:END:
#+CAPTION: Prefix value in =local.mk=
#+BEGIN_SRC makefile
prefix = /dir/where/you/want/to/install/org # Default: /usr/share
#+END_SRC
** Source block with list syntax in a list                  :@fixme:upstream:
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: list-has-src-block-with-list-syntax
:END:
As of today (<2017-08-02 Wed>), an upstream bug in /Blackfriday/
([[https://github.com/russross/blackfriday/issues/239][Issue #239]]) causes fenced code blocks in lists to not render
correctly if they contain Markdown syntax lists.

Below is an example of such a case:

- List item 1
  #+BEGIN_SRC md
- List item 1.1 in code block
- List item 1.2 in code block
  #+END_SRC
- List item 2
  #+BEGIN_SRC md
+ List item 2.1 in code block
+ List item 2.2 in code block
  #+END_SRC
- List item 3
** Source block without list syntax in a list
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: list-has-src-block-but-no-list-syntax
:END:
This case is not affected by /Blackfriday/ [[https://github.com/russross/blackfriday/issues/239][Issue #239]] as the fenced
code block does not have Markdown syntax lists.
- List item 1
  #+BEGIN_SRC md
,*abc*
/def/
=def=
  #+END_SRC
- List item 2
** Source block with list syntax but not in a list
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: src-block-outside-list-with-list-syntax
:END:
#+BEGIN_SRC md
- list 1
#+END_SRC
** Org Babel Results
:PROPERTIES:
:EXPORT_FILE_NAME: org-babel-results-preserve-indent
:END:
#+BEGIN_SRC python :exports both :results output
str = 'a\tbc'
print(str[1:])
#+END_SRC

#+RESULTS:
: 	bc

The whitespace before "bc" in the results block above should be preserved.
** Indented source block
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-indented
:END:
Test that indented source blocks export fine.

    #+BEGIN_SRC emacs-lisp
    (defun small-shell ()
	(interactive)
	(split-window-vertically)
	(other-window 1)
	(shrink-window (- (window-height) 12))
    (ansi-term))
    #+END_SRC
*** More tests!
- List item 1
  #+BEGIN_SRC emacs-lisp
  (message "I am in list at level-1 indentation")
  #+END_SRC
  - List item 1.1
    #+BEGIN_SRC emacs-lisp
    (message "I am in list at level-2 indentation")
    #+END_SRC
    - List item 1.1.1
      #+BEGIN_SRC emacs-lisp
      (message "I am in list at level-3 indentation")
      #+END_SRC
  - List item 2.1
    #+BEGIN_SRC emacs-lisp
    (message "I am in list back at level-2 indentation")
    #+END_SRC
- List item 2
  #+BEGIN_SRC emacs-lisp
  (message "I am in list back at level-1 indentation")
  #+END_SRC

#+BEGIN_SRC emacs-lisp
(message "And now I am at level-0 indentation")
#+END_SRC

Reference -- [[https://github.com/gohugoio/hugo/issues/4006][hugo#4006]]
** Markdown source block with Hugo shortcodes                     :shortcode:
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-md-with-hugo-shortcodes
:EXPORT_HUGO_CODE_FENCE: t
:END:
*** Shortcodes escaped
The =figure= shortcodes in the two Markdown source code blocks below
should *not* be expanded.. they should be visible verbatim.

- {&lbrace;< .. >}&rbrace; --- [[https://gohugo.io/content-management/shortcodes/#shortcodes-without-markdown][Shortcodes without Markdown]]
- {&lbrace;% .. %}&rbrace; --- [[https://gohugo.io/content-management/shortcodes/#shortcodes-with-markdown][Shortcodes with Markdown]]
**** Code block using code fences
#+BEGIN_SRC md
{{< figure src="http://orgmode.org/img/org-mode-unicorn-logo.png" >}}
{{% figure src="http://orgmode.org/img/org-mode-unicorn-logo.png" %}}
#+END_SRC
**** Code block using =highlight= shortcode
Here, the =-n= switch is added to the Org source block to
auto-enable[fn:4] using the =highlight= shortcode.
#+BEGIN_SRC md -n
{{< figure src="http://orgmode.org/img/org-mode-unicorn-logo.png" >}}
{{% figure src="http://orgmode.org/img/org-mode-unicorn-logo.png" %}}
#+END_SRC
*** Shortcodes *not* escaped
The =figure= shortcodes in the below example block *should* be
expanded.. you should be seeing little unicorns below.
#+BEGIN_EXAMPLE
{{< figure src="http://orgmode.org/img/org-mode-unicorn-logo.png" >}}
{{% figure src="http://orgmode.org/img/org-mode-unicorn-logo.png" %}}
#+END_EXAMPLE
Above a =#+BEGIN_EXAMPLE= .. =#+END_EXAMPLE= block is chosen
arbitrarily. The Hugo shortcodes will remain unescaped in *any*
source/example block except for _Markdown source blocks_ (annotated
with =md= language).
-----
*It is necessary to set the Hugo site config variable
=pygmentsCodeFences= to =true= for syntax highlighting to work for
fenced code blocks.*
** Org Source Block                                                :noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: org-source-block
:END:
Test case for the case where user has set
=org-hugo-langs-no-descr-in-code-fences= to a list containing the
element =org=.

/As this variable is dependent on user's config, this post is not set
to be exported by default./

The [[https://discourse.gohugo.io/t/fenced-code-block-with-language-unsupported-by-pygments/7710][issue]] with Hugo will be seen if:
- =pygmentsCodeFences = true= is set in the Hugo site =config.toml=,
- a source block's language is set to one that's not supported by
  Pygments (like [[https://bitbucket.org/birkenfeld/pygments-main/issues/719/wishlist-support-org][org]], and thus the below example with source code
  language set to =org=), and
- =org-hugo-langs-no-descr-in-code-fences= is set to a value not
  containing that lanaguage descriptor (=org= in this case).
#+BEGIN_SRC org
# Org comment
Export this post after setting
=org-hugo-langs-no-descr-in-code-fences= to =(org)= and temporarily
removing the =noexport= tag.
#+END_SRC
* Formatting                                                     :formatting:
** General
:PROPERTIES:
:EXPORT_DATE: 2017-07-31
:EXPORT_FILE_NAME: general-formatting
:END:
Below table shows the translation of Org markup to Markdown markup in
the exported =.md= files.
|--------------------+--------------------------------------------------------------------+-----------------------|
| Org                | Markdown                                                           | In Hugo rendered HTML |
|--------------------+--------------------------------------------------------------------+-----------------------|
| =*bold*=           | =**bold**=                                                         | *bold*                |
| =/italics/=        | =_italics_=                                                        | /italics/             |
| ==monospace==      | =`monospace`=                                                      | =monospace=           |
| =~key-binding~=    | =`key-binding`=                                                    | ~key-binding~         |
|                    | - if =org-hugo-use-code-for-kbd= is nil [default]                  |                       |
| =~key-binding~=    | =<kbd>key-binding</kbd>=                                           |                       |
|                    | - if =org-hugo-use-code-for-kbd= is non-nil                        |                       |
|                    | - Requires *CSS* to render the =<kbd>= tag as something special.   |                       |
| =+strike-through+= | =~~strike-through~~=                                               | +strike-through+      |
| =_underline_=      | =<span class = "underline">underline</span>=                       | _underline_           |
|                    | - Requires *CSS* to render this =underline= class as an underline. |                       |
|--------------------+--------------------------------------------------------------------+-----------------------|
** Keyboard tag
*** Use Org Code markup for =kbd= tag (default behavior)
:PROPERTIES:
:EXPORT_FILE_NAME: kbd-tag-default
:EXPORT_DATE: 2017-07-31
:END:
This is the default behavior. So =~C-h f~= will show up as =`C-h f`=
and then =<code>C-h f</code>= in the final Hugo generated HTML.

Example:
- Few of Emacs help keybindings: ~C-h f~, ~C-h v~
*** Use Org Code markup for =kbd= tag
:PROPERTIES:
:EXPORT_HUGO_USE_CODE_FOR_KBD: t
:EXPORT_FILE_NAME: kbd-tag-yes
:EXPORT_DATE: 2017-07-31
:END:
Here the Org code markup is explicitly specified to be used for
=<kbd>= tag generation by setting =EXPORT_HUGO_USE_CODE_FOR_KBD=
property to =t=. So =~C-h f~= will show up as =<kbd>C-h f</kbd>=.

Example:
- Few of Emacs help keybindings: ~C-h f~, ~C-h v~
*** Don't Use Org Code markup for =kbd= tag
:PROPERTIES:
:EXPORT_HUGO_USE_CODE_FOR_KBD:
:EXPORT_FILE_NAME: kbd-tag-no
:EXPORT_DATE: 2017-07-31
:END:
Note that to disable the "use code for kbd" option, the value portion
of the property needs to be left *empty* instead of setting to =nil=!
#+BEGIN_EXAMPLE
:PROPERTIES:
:EXPORT_HUGO_USE_CODE_FOR_KBD:
:END:
#+END_EXAMPLE

Here =~C-h f~= will show up as =`C-h f`= in Markdown and then
=<code>C-h f</code>= in the final Hugo generated HTML.

Example:
- Few of Emacs help keybindings: ~C-h f~, ~C-h v~
*** COMMENT Using the new 'kbd' macro from Org =master=
:PROPERTIES:
:EXPORT_FILE_NAME: kbd-macro-org-9-2
:END:
- {{{kbd(C-h f)}}}
- {{{kbd(C-x SPC)}}}
- {{{kbd(M-RET)}}}
** Multi-line bold
:PROPERTIES:
:EXPORT_FILE_NAME: multi-line-bold
:END:
*This works fine as the bold sentence does not include a newline.*

*This is a sentence that should render completely in bold. It is
 broken across multiple lines (in Org source) because of
 auto-filling. But that should not break the bold rendering. But it
 does by default.*

If you do not see the above paragraph completely in bold, have below
in your emacs config to fix it:
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  ;; Allow multiple line Org emphasis markup.
  ;; http://emacs.stackexchange.com/a/13828/115
  (setcar (nthcdr 4 org-emphasis-regexp-components) 20) ;Up to 20 lines, default is just 1
  ;; Below is needed to apply the modified `org-emphasis-regexp-components'
  ;; settings from above.
  (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components))
#+END_SRC
* Example block                                                     :example:
** Simple
:PROPERTIES:
:EXPORT_DATE: 2017-07-19
:EXPORT_FILE_NAME: example-simple
:END:
#+BEGIN_EXAMPLE
This is an example
#+END_EXAMPLE
** Example blocks with line number annotation
:PROPERTIES:
:EXPORT_FILE_NAME: example-block-with-line-numbers
:END:
- [[http://orgmode.org/manual/Literal-examples.html][Org reference]]
- [[https://gohugo.io/content-management/syntax-highlighting/][Hugo =highlight= shortcode with line numbers]]
*** Default new line number start
#+BEGIN_EXAMPLE -n
line 1
 line 2
#+END_EXAMPLE
*** Specify new line number start
#+BEGIN_EXAMPLE -n 20
line 20
line 21
#+END_EXAMPLE
*** Default continued line numbers
#+BEGIN_EXAMPLE +n
 line 22
line 23
#+END_EXAMPLE
*** Specify continued line numbers jump
#+BEGIN_EXAMPLE +n 10
line 33
line 34
#+END_EXAMPLE

* Menu in front matter                                                 :menu:
** Menu Meta Data in TOML Front Matter
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu "something here" :weight 80 :parent posts :identifier foo1
:END:
*** Overriding few menu properties
:PROPERTIES:
:EXPORT_FILE_NAME: menu-alist-meta-data-toml-override-partial
:EXPORT_DATE: 2017-07-18
:EXPORT_HUGO_MENU_OVERRIDE: :weight 10 :identifier ov-partial
:END:
For this post, we should see just the menu /weight/ and /identifier/
properties get overridden.

You need to set unique menu identifiers, else you get a Hugo error
like this:
#+BEGIN_EXAMPLE
ERROR 2017/07/18 12:32:14 Two or more menu items have the same name/identifier in Menu "main": "menu-meta-data-in-yaml-front-matter".
Rename or set an unique identifier.
#+END_EXAMPLE
*** Overriding menu properties completely
:PROPERTIES:
:EXPORT_FILE_NAME: menu-alist-meta-data-toml-override-full
:EXPORT_DATE: 2017-07-18
:EXPORT_HUGO_MENU: :menu test :weight 50
:END:
For this post, we see that no menu properties are inherited from the
parent; only the menu properties set in his subtree are effective.
*** Auto assign weights
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu "auto weight"
:END:
**** Post with menu 1
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-1
:EXPORT_DATE: 2017-07-20
:END:
**** Post with menu 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-2
:EXPORT_DATE: 2017-07-20
:END:
**** Post with menu 3
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-3
:EXPORT_DATE: 2017-07-20
:END:
**** Post with menu 4
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-4
:EXPORT_DATE: 2017-07-20
:END:
**** Post with menu 5
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-5
:EXPORT_DATE: 2017-07-20
:END:
** Menu Meta Data in YAML Front Matter                                 :yaml:
:PROPERTIES:
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:END:
*** White space in menu entry
:PROPERTIES:
:EXPORT_FILE_NAME: menu-meta-data-yaml2
:EXPORT_DATE: 2017-07-19
:EXPORT_HUGO_MENU: :menu "something here" :weight 25
:END:
Testing the addition of /menu/ meta data to the YAML front matter.
Here the front matter format is set to YAML using the
=HUGO_FRONT_MATTER_FORMAT= key in property drawer.

Here there is white space in menu entry keyword.
*** White space in menu name
:PROPERTIES:
:EXPORT_FILE_NAME: menu-meta-data-yaml3
:EXPORT_DATE: 2017-07-19
:EXPORT_HUGO_MENU: :menu main :weight 25 :parent posts :name "Menu in YAML"
:END:
Testing the addition of /menu/ meta data to the YAML front matter.
Here the front matter format is set to YAML using the
=HUGO_FRONT_MATTER_FORMAT= key in property drawer.

Here there is white space in menu name property.
* Custom front matter                                             :custom_fm:
** Custom front matter in one line
:PROPERTIES:
:EXPORT_FILE_NAME: custom-front-matter-one-line
:EXPORT_DATE: 2017-07-24
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :foo bar :baz zoo :alpha 1 :beta "two words" :gamma 10
:END:
** Custom front matter in multiple lines
:PROPERTIES:
:EXPORT_FILE_NAME: custom-front-matter-multiple-lines
:EXPORT_DATE: 2017-07-24
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :foo bar
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :baz zoo
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :alpha 1
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :beta "two words"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :gamma 10
:END:
From [[http://orgmode.org/manual/Property-syntax.html][*(org) Property syntax*]]:
#+BEGIN_QUOTE
   It is also possible to add to the values of inherited properties.
The following results in the 'genres' property having the value
"Classic Baroque" under the 'Goldberg Variations' subtree.
#+END_QUOTE

#+BEGIN_EXAMPLE
,* CD collection
,** Classic
:PROPERTIES:
:GENRES: Classic
:END:
,*** Goldberg Variations
:PROPERTIES:
:Title:     Goldberg Variations
:Composer:  J.S. Bach
:Artist:    Glen Gould
:Publisher: Deutsche Grammophon
:NDisks:    1
:GENRES+:   Baroque
:END:
#+END_EXAMPLE
** Custom front matter with list values                         :list_values:
*** Custom front matter with list values in TOML
:PROPERTIES:
:EXPORT_FILE_NAME: custom-front-matter-with-list-values-toml
:EXPORT_HUGO_FRONT_MATTER_FORMAT: toml
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :animals '(dog cat "penguin" "mountain gorilla")
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :strings-symbols '("abc" def "two words")
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :integers '(123 -5 17 1_234)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :floats '(12.3 -5.0 -17E-6)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :booleans '(true false)
:END:
[[https://github.com/kaushalmodi/ox-hugo/issues/99][Issue # 99]]
*** Custom front matter with list values in YAML
:PROPERTIES:
:EXPORT_FILE_NAME: custom-front-matter-with-list-values-yaml
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :animals '(dog cat "penguin" "mountain gorilla")
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :strings-symbols '("abc" def "two words")
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :integers '(123 -5 17 1_234)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :floats '(12.3 -5.0 -17E-6)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :booleans '(true false)
:END:
[[https://github.com/kaushalmodi/ox-hugo/issues/99][Issue # 99]]
* Outputs                                                           :outputs:
** Output HTML and JSON                                                :json:
:PROPERTIES:
:EXPORT_FILE_NAME: output-html-and-json
:EXPORT_HUGO_OUTPUTS: html json
:END:
*Note*: A =single.json= is required to be at a valid location in the
template lookup hierarchy for the JSON outputs to be created.

[[./index.json][Here's the JSON output version of this page]].
** Setting empty outputs is fine                                      :empty:
:PROPERTIES:
:EXPORT_FILE_NAME: output-empty
:EXPORT_HUGO_OUTPUTS:
:END:
If the =EXPORT_HUGO_OUTPUTS= property is left empty/unset, =ox-hugo=
will not set the =outputs= variable in the front-matter at all. So
only the HTML output will be created (default).
* Post body                                                            :body:
** Summary Splitter
:PROPERTIES:
:EXPORT_FILE_NAME: summary-splitter
:EXPORT_DATE: 2017-07-21
:END:
Here is the summary.
#+HUGO: more
Here is text after the [[https://gohugo.io/content-management/summaries#user-defined-manual-summary-splitting][summary splitter]].
** Dealing with underscores
:PROPERTIES:
:EXPORT_FILE_NAME: dealing-with-underscores
:EXPORT_DATE: 2017-07-21
:END:
This underscore should appear escaped in Markdown: _

This underscore is in a verbatim block, so it should not be escaped:
=_=

This underscore also shouldn't be escaped as it's in an emoji
code: :raised_hands:

And these ones should be eventually removed and _underline_ the text
(/Requires CSS to do so./) -- *Org syntax*.
** Nested bold and italics
:PROPERTIES:
:EXPORT_DATE: 2017-07-22
:EXPORT_FILE_NAME: nested-bold-italics
:END:
- /This is italics, and *this is bold too*, and back to plain
  italics./
- *This is bold, and /this is italics too/, and back to plain bold.*
** Single and Double quotes
:PROPERTIES:
:EXPORT_FILE_NAME: single-double-quotes
:EXPORT_DATE: 2017-07-22
:END:
The strings in these two columns should look the exact same.
|   | Rendered Actual             | Rendered Expection          |
|---+-----------------------------+-----------------------------|
| 1 | 'This'                      | ‘This’                      |
| 2 | "This"                      | “This”                      |
| 3 | "It's"                      | “It’s”                      |
| 4 | 'It's'                      | ‘It’s’                      |
| 5 | "<http://localhost:1111/>"  | “<http://localhost:1111/>”  |
| 6 | "<http://localhost:1111/>". | “<http://localhost:1111/>”. |
#+TBLFM: $1=@#-1

*Note:* There is a rendering issue is Row 5 above. That seems to be a
 corner case, because notice that Row 6 looks fine just because there
 was a trailing period. /Will live with this issue for now./
** /ndash/ `and` *mdash*
:PROPERTIES:
:EXPORT_FILE_NAME: ndash-and-mdash
:EXPORT_DATE: 2017-07-22
:END:
The strings in these two columns should look the exact same.
|   | Character | Rendered Actual | Rendered Expection |
|---+-----------+-----------------+--------------------|
| 1 | Hyphen    | a - b           | a - b              |
| 2 | Ndash     | a -- b           | a – b              |
| 3 | Mdash     | a --- b           | a — b              |
| 4 | Ellipsis  | a ... b           | a … b              |
#+TBLFM: $1=@#-1
*** Title sanitization
This post has italics, monospace and bold in the title. This is to
test that those markup characters *do not* end up in the =title= front
matter of the post because HTML does not allow markup in the =<title>=
section.

So the title of this post should read as "ndash and mdash".
* Footnotes Test                                                   :footnote:
** Footnotes 1
:PROPERTIES:
:EXPORT_DATE: 2017-07-21
:EXPORT_FILE_NAME: footnotes-1
:END:
This is some text[fn:1].

/Note to self: You *cannot* name an Org heading 'Footnotes'; that's
reserved by Org to store all the footnotes./
** Footnotes 2
:PROPERTIES:
:EXPORT_DATE: 2017-07-21
:EXPORT_FILE_NAME: footnotes-2
:END:
This is some text[fn:2].
** Footnotes in a row
:PROPERTIES:
:EXPORT_FILE_NAME: footnotes-in-a-row
:EXPORT_DATE: 2017-07-21
:END:
This is some text[fn:1][fn:2].
** Multiple references of same footnote
:PROPERTIES:
:EXPORT_FILE_NAME: multi-ref-same-footnote
:EXPORT_DATE: 2017-07-21
:END:
This is some text[fn:1].
This is some text[fn:1].
This is some text[fn:1].
** Multi-line footnote
:PROPERTIES:
:EXPORT_FILE_NAME: multi-line-footnote
:END:
This is some text[fn:3].
** Bind footnotes to the preceding word
:PROPERTIES:
:EXPORT_FILE_NAME: footnotes-bind-to-preceding-word
:EXPORT_HUGO_ALIASES: footnotes-at-eol
:END:
See [[https://github.com/kaushalmodi/ox-hugo/issues/96][Issue#96]].

To test the fix for this, increase/decrease the width of the browser
window showing this page so that the test lines below start wrapping
around, and you will see that the footnote references will *never* be
on their own on a new line.
*** Footnote ref at EOL
**** Last word, followed by FOOTNOTE PERIOD --- /Good Case A/
- As there is no space in-between "word FOOTNOTE PERIOD", this text
  will stay unmodified.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1].

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1].

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1].

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1].
**** Last word, followed by FOOTNOTE *space* PERIOD --- /Bad Case A1/
- In this case, the *space* before the PERIOD at EOL is removed.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1] .

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1] .

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1] .

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1] .
**** Last word, followed by PERIOD *space* FOOTNOTE --- /Bad Case A2/
- In this case, the *space* before FOOTNOTE is replaced with =&nbsp;=.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a. [fn:1]

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a. [fn:1]

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a. [fn:1]

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a. [fn:1]
**** Last word, followed by *space* FOOTNOTE *space* PERIOD --- /Bad Case A3/
- This is a blend of /Bad Case A1/ and /Bad Case A2/ above.
- In this case, the *space* before FOOTNOTE is replaced with =&nbsp;=,
  *AND* the *space* before the PERIOD at EOL is removed.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a [fn:1] .

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a [fn:1] .

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a [fn:1] .

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a [fn:1] .

abcde a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a [fn:1] .
*** Footnote NOT at EOL
**** Word, followed by FOOTNOTE PERIOD --- /Good Case B/
- As there is no space in-between "word FOOTNOTE PERIOD", this text
  will stay unmodified.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1]. B b b.

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1]. B b b.

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1]. B b b.

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1].
**** Word, followed by FOOTNOTE *space* PERIOD --- /Bad Case B1/
- In this case, the *space* before the PERIOD at EOL is removed.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1] . B b b.

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1] . B b b.

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1] . B b b.

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1] . B b b.
**** Word, followed by PERIOD *space* FOOTNOTE --- /Bad Case B2/
- In this case, the *space* before FOOTNOTE is replaced with =&nbsp;=.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a. [fn:1] B b b.

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a. [fn:1] B b b.

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a. [fn:1] B b b.

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a. [fn:1] B b b.
**** Word, followed by *space* FOOTNOTE *space* PERIOD --- /Bad Case B3/
- This is a blend of /Bad Case B1/ and /Bad Case B2/ above.
- In this case, the *space* before FOOTNOTE is replaced with =&nbsp;=,
  *AND* the *space* before the PERIOD at EOL is removed.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a [fn:1] . B b b.

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a [fn:1] . B b b.

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a [fn:1] . B b b.

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a [fn:1] . B b b.

abcde a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a [fn:1] . B b b.
* Tags
** Basic tags                                                       :abc:def:
:PROPERTIES:
:EXPORT_FILE_NAME: test-tags
:EXPORT_DATE: 2017-07-12T13:48:01-04:00
:END:
Testing tags set using Org tags in headings.
** Prefer hyphens and allow spaces
:PROPERTIES:
:EXPORT_HUGO_PREFER_HYPHEN_IN_TAGS: t
:EXPORT_HUGO_ALLOW_SPACES_IN_TAGS: t
:END:
*** Hyphens and spaces in tags      :an_apple__a___pear:good__bad__and__ugly:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphens-and-spaces-in-tags
:END:
*** Hyphens and spaces in categories :@an_apple__a___pear:@good__bad__and__ugly:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphens-and-spaces-in-categories
:END:
The Org tags do not allow spaces. So the trick we use is replace
*double* underscores with spaces.

So an Org tag =@abc__def= becomes Hugo category =abc def=.
** Hyphens in Org tags
*** Prefer
:PROPERTIES:
:EXPORT_HUGO_PREFER_HYPHEN_IN_TAGS: t
:END:
**** Prefer Hyphen in Tags    :_a:___a:b_:b___:a_b:a___b:a_b___c:_a_b___c___:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphen-tags-prefer
:END:
**** Prefer Hyphen Categories :@_a:@___a:@b_:@b___:@a_b:@a___b:@a_b___c:@_a_b___c___:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphen-categories-prefer
:END:
*** Don't Prefer
:PROPERTIES:
:EXPORT_HUGO_PREFER_HYPHEN_IN_TAGS:
:END:
**** Don't Prefer Hyphen in Tags          :_a:_a:b_:b_:a_b:a_b:a_b_c:_a_b_c_:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphen-tags-dont-prefer
:END:
**** Don't Prefer Hyphen Categories :@_a:@_a:@b_:@b_:@a_b:@a_b:@a_b_c:@_a_b_c_:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphen-categories-dont-prefer
:END:
** Spaces in Org Tags
*** Want Spaces
:PROPERTIES:
:EXPORT_HUGO_ALLOW_SPACES_IN_TAGS: t
:END:
**** Spaces in tags               :abc__def:abc__def__ghi:abc__def__ghi__jkl:
:PROPERTIES:
:EXPORT_FILE_NAME: spaces-in-tags
:END:
The Org tags do not allow spaces. So the trick we use is replace
*double* underscores with spaces.

So an Org tag =abc__def= becomes Hugo tag =abc def=.
**** Spaces in categories      :@abc__def:@abc__def__ghi:@abc__def__ghi__jkl:
:PROPERTIES:
:EXPORT_FILE_NAME: spaces-in-categories
:END:
The Org tags do not allow spaces. So the trick we use is replace
*double* underscores with spaces.

So an Org tag =@abc__def= becomes Hugo category =abc def=.
*** Don't Want Spaces
:PROPERTIES:
:EXPORT_HUGO_ALLOW_SPACES_IN_TAGS:
:END:
**** No Spaces in tags            :abc__def:abc__def__ghi:abc__def__ghi__jkl:
:PROPERTIES:
:EXPORT_FILE_NAME: no-spaces-in-tags
:END:
**** No Spaces in categories   :@abc__def:@abc__def__ghi:@abc__def__ghi__jkl:
:PROPERTIES:
:EXPORT_FILE_NAME: no-spaces-in-categories
:END:
** Tags as Categories
*** Category A                                                        :@catA:
**** Cat A post 1                                                      :meow:
:PROPERTIES:
:EXPORT_DATE: 2017-07-24
:EXPORT_FILE_NAME: cat-a-post-1
:END:
This post is in category =catA= and tagged =meow=.
**** Cat A and cat B                                                  :@catB:
:PROPERTIES:
:EXPORT_FILE_NAME: cat-a-and-cat-b
:EXPORT_DATE: 2017-07-24
:END:
This gets both categories =catA= and =catB=.
** Do not leak post's immediate sub-heading tag into the front-matter :expected_tag:post_heading_followed_soon_with_subheading:
:PROPERTIES:
:EXPORT_FILE_NAME: dont-leak-subheading-tags
:END:
*** Sub-heading 1                                            :unexpected_tag:
This is a *special* case where:
- A post has a sub-heading as the first line in its body, and
- That sub-heading has a tag too!

The passing case for this test would be that the =unexpected_tag= does
not leak into the post's front-matter.
* Links                                                               :links:
** Links with target attribute
:PROPERTIES:
:EXPORT_FILE_NAME: links-with-target-attribute
:EXPORT_HUGO_BLACKFRIDAY: :hrefTargetBlank nil
:END:
#+ATTR_HTML: :target _blank :rel noopener
[[http://orgmode.org/manual/Hyperlinks.html][This link (to Hyperlinks chapter in Org manual)]] will open in a new tab
as it is annotated with ~target="_blank"~.

#+ATTR_HTML: :target _self
[[http://orgmode.org/manual/Hyperlinks.html][Here's the same link]] but with ~target="_self"~ annotation. So
clicking it will open that link in this same tab!

#+ATTR_HTML: :width 10% :target _self
[[http://orgmode.org/img/org-mode-unicorn-logo.png][http://orgmode.org/img/org-mode-unicorn-logo.png]]

Above is a link to an image. The =width= attribute of /10%/ though
must apply *only* to the image, and not to the link, and the =target=
attribute must apply *only* to the link, and not to the image.

[[http://orgmode.org/manual/Hyperlinks.html][Here's the same link again]], but this time there is no =#+ATTR_HTML=
annotation. So the behavior will depend on the browser (typically an
external link will open in a new tab automatically).
** Within the same post (Internal links)                     :internal_links:
*** Link to headings by name                                   :toc:headings:
:PROPERTIES:
:EXPORT_FILE_NAME: link-to-headings-by-name
:EXPORT_OPTIONS: num:t toc:t
:END:
**** Alpha 101
:PROPERTIES:
:UNNUMBERED: t
:END:
- Link (with description) to a heading with section number: [[* Beta 102][Link to
  /Beta 102/ heading]]
- Link (no description) to a heading without section number: [[* Zeta
  103]]
**** Beta 102
- Link (with description) to a heading without section number: [[* Alpha 101][Link to
  /Alpha 101/ heading]]
***** Gamma 102.1
****** Delta 102.1.1
****** Epsilon 102.1.2
**** Zeta 103
:PROPERTIES:
:UNNUMBERED: t
:END:
***** Links (no descriptions) to headings with section numbers
- Section [[* Gamma 102.1]]
- Section [[* Delta 102.1.1]]
- Section [[* Epsilon 102.1.2]]
*** Link to a heading CUSTOM_ID
:PROPERTIES:
:EXPORT_FILE_NAME: link-heading-custom-id
:EXPORT_DATE: 2017-07-28
:END:
*Obviously, all the =CUSTOM_ID='s set by the user in this file have to
 be unique.*
**** Heading 1
:PROPERTIES:
:CUSTOM_ID: link-heading-1
:END:
- Link to [[#link-heading-2][Heading 2]]
#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t
#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t
#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t
#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t
**** Heading 2
:PROPERTIES:
:CUSTOM_ID: link-heading-2
:END:
- Link to [[#link-heading-1][Heading 1]]
*** Links to Org targets
:PROPERTIES:
:EXPORT_FILE_NAME: links-to-org-targets
:END:
From [[http://orgmode.org/manual/Internal-links.html][(org) Internal links]],

#+BEGIN_SRC org
- one item
- <<target>>another item
Here we refer to item [[target]].
#+END_SRC

will output below (/lorem-ipsum/ added to increase page content so
that the link jump is evident):

- one item
- <<target>>another item

/Scroll to the end of the below 'lorem-ipsum' block to find the test
link./

#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

*Here we refer to item [[target]].*
*** Links to source blocks
:PROPERTIES:
:EXPORT_FILE_NAME: links-to-source-blocks
:END:
From [[http://orgmode.org/manual/Internal-links.html][(org) Internal links]],

#+BEGIN_QUOTE
   If no dedicated target exists, the link will then try to match the
exact name of an element within the buffer.  Naming is done with the
‘#+NAME’ keyword, which has to be put in the line before the element it
refers to, as in the following example
    #+BEGIN_EXAMPLE
    ,#+NAME: My Target
    | a  | table      |
    |----+------------|
    | of | four cells |
    #+END_EXAMPLE
#+END_QUOTE

Also, when targeting a =#+NAME= keyword, *=#+CAPTION= keyword is
mandatory in order to get proper numbering* for _source blocks_,
_images_ and _tables_.

So the below code block:
#+BEGIN_SRC org
,#+CAPTION: Hello
,#+NAME: code__hello
,#+BEGIN_SRC emacs-lisp
(message "Hello")
,#+END_SRC

,*Here we refer to code snippet [[code__helloagain]].*

,#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

,#+CAPTION: Hello Again
,#+NAME: code__helloagain
,#+BEGIN_SRC emacs-lisp
(message "Hello again")
,#+END_SRC

,*Here we refer to code snippet [[code__hello]].*
#+END_SRC

will output below (/lorem-ipsum/ added to increase page content so
that the link jump is evident):

#+CAPTION: Hello
#+NAME: code__hello
#+BEGIN_SRC emacs-lisp
(message "Hello")
#+END_SRC

*Here we refer to code snippet [[code__helloagain]].*

#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

#+CAPTION: Hello Again
#+NAME: code__helloagain
#+BEGIN_SRC emacs-lisp
(message "Hello again")
#+END_SRC

*Here we refer to code snippet [[code__hello]].*
*** Links to tables
:PROPERTIES:
:EXPORT_FILE_NAME: links-to-tables
:END:
*Note*: When targeting a =#+NAME= keyword, *=#+CAPTION= keyword is
mandatory in order to get proper numbering* for _source blocks_,
_images_ and _tables_.

#+BEGIN_SRC org
,#+CAPTION: Simple table 1
,#+NAME: tab__simple1
| a | b |
| c | d |

,*Here we refer to table [[tab__simple2]].*

,#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

Here's another table:

,#+CAPTION: Simple table 2
,#+NAME: tab__simple2
| e | f |
| g | h |

,*Here we refer to table [[tab__simple1]].*
#+END_SRC

will output below (/lorem-ipsum/ added to increase page content so
that the link jump is evident):

#+CAPTION: Simple table 1
#+NAME: tab__simple1
| a | b |
| c | d |

*Here we refer to table [[tab__simple2]].*

#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

Here's another table:

#+CAPTION: Simple table 2
#+NAME: tab__simple2
| e | f |
| g | h |

*Here we refer to table [[tab__simple1]].*
-----
Reference: [[http://orgmode.org/manual/Images-and-tables.html][(org) Images and tables]].
*** Links to images
:PROPERTIES:
:EXPORT_FILE_NAME: links-to-images
:END:
*Note*: When targeting a =#+NAME= keyword, *=#+CAPTION= keyword is
mandatory in order to get proper numbering* for _source blocks_,
_images_ and _tables_.

#+BEGIN_SRC org
,#+CAPTION: Org Logo
,#+NAME: img__org_logo1
[[/images/org-mode-unicorn-logo.png]]

,*Here we refer to image [[img__org_logo2]].*

,#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

Here's the same image again, but with a different Org link ID:

,#+CAPTION: Same Org Logo
,#+NAME: img__org_logo2
[[/images/org-mode-unicorn-logo.png]]

,*Here we refer to image [[img__org_logo1]].*
#+END_SRC

will output below (/lorem-ipsum/ added to increase page content so
that the link jump is evident):

#+CAPTION: Org Logo
#+NAME: img__org_logo1
[[/images/org-mode-unicorn-logo.png]]

*Here we refer to image [[img__org_logo2]].*

#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

Here's the same image again, but with a different Org link ID:

#+CAPTION: Same Org Logo
#+NAME: img__org_logo2
[[/images/org-mode-unicorn-logo.png]]

*Here we refer to image [[img__org_logo1]].*
-----
Reference: [[http://orgmode.org/manual/Images-and-tables.html][(org) Images and tables]].
* Equations                                                       :equations:
** Inline equations
:PROPERTIES:
:EXPORT_FILE_NAME: equation-latex-frag
:EXPORT_DATE: 2017-07-31
:END:
- Inline equations are wrapped between =\(= and =\)=.
  - =$= wrapping also works, but it is not preferred as it comes with
    restrictions like "there should be no whitespace between the
    equation and the =$= delimiters".

    So =$ a=b $= will not work (it will look like: $ a=b $), but
    =$a=b$= will work (it will look like: $a=b$).

    On the other hand, both =\(a=b\)= (it will look like: \(a=b\)) and
    =\( a=b \)= (it will look like: \( a=b \)) will work.
- One-per-line equations are wrapped between =\[= and =\]= or =$$=
  delimiters.

For example, below in Org:
#+BEGIN_SRC text
LaTeX formatted equation: \( E = -J \sum_{i=1}^N s_i s_{i+1} \)
#+END_SRC

will look like this in Hugo rendered HTML:

LaTeX formatted equation: \( E = -J \sum_{i=1}^N s_i s_{i+1 }\)

(Don't see this in Markdown, see what it looks after Hugo has
processed it.)

Here's another example, taken from [[http://orgmode.org/manual/LaTeX-fragments.html][(org) LaTeX fragments]].

Below in Org:
#+BEGIN_EXAMPLE
If $a^2=b$ and \( b=2 \), then the solution must be either
$$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \]
#+END_EXAMPLE

renders to:

If $a^2=b$ and \( b=2 \), then the solution must be either
$$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \]

(Note that the last two equations show up on their own lines.)
* Lists                                                               :lists:
** List following a list
:PROPERTIES:
:EXPORT_FILE_NAME: list-following-a-list
:EXPORT_DATE: 2017-07-31
:END:
You need to force end of list when you have something like an
unordered list immediately following an ordered list.

/The easiest and cleanest way to do that is adding a comment between
those lists./ -- [[https://stackoverflow.com/a/8964494/1219634][Reference]]

That would be the implementing in the Org exporter backend. But in
Org, two consecutive blank lines after a list ends the list.

In the below example, the /foo*/ items would be in a different =<ul>=
element than the /bar*/ items.
*** Unordered list following an unordered list
- foo1
- foo2


+ bar1
+ bar2
*** Unordered list following an ordered list
1. foo3
2. foo4


- bar3
- bar4
*** Ordered list following an unordered list
- foo5
- foo6


1. bar5
2. bar6
*** Description list following an ordered list
- foo1
- foo2


- bar1 :: description
- bar2 :: description
** Nested lists
:PROPERTIES:
:EXPORT_FILE_NAME: nested-lists
:EXPORT_DATE: 2017-07-31
:END:
+ foo1
+ foo2
  - bar1
  - bar2
    + baz1
    + baz2
      - zoo1
      - zoo2
        1. numbered1
        2. numbered2
** Force ordered list numbering
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: force-ordered-list-numbering
:END:
1. This will be 1.
1. This will be 2.


1. [@10] This will be 10!
1. This will be 11.


1. [@17] This will be 17!
1. This will be 18.
1. [@123] This will be 123!
1. This will be 124.


1. This will be 1 again.
1. This will be 2.

Another example:

1. This will be 1.
1. [@3] This will be 3!
1. [@7] This will be 7!
1. [@100] This will be 100!

See [[http://orgmode.org/manual/Plain-lists.html][(org) Plain lists]] to read more about plain lists in Org.
** Checklist
:PROPERTIES:
:EXPORT_FILE_NAME: checklist
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :fractions false
:END:
This is a check-list:
*** Checklist 1 [60%]
Checklist showing progress in percentage.

- [ ] Task 1
- [X] Task 2
- [X] Task 3
- [ ] Task 4
- [X] Task 5
*** Checklist 2 [2/5]
Checklist showing progress in ratio.

- [ ] Task 1
- [ ] Task 2
- [X] Task 3
- [ ] Task 4
- [X] Task 5
* Quotes                                                             :quotes:
** Consecutive quotes
:PROPERTIES:
:EXPORT_FILE_NAME: consecutive-quotes
:EXPORT_DATE: 2017-08-01
:END:
Some text.
#+BEGIN_QUOTE
Quote 1. This is a long quote that auto-fills into multiple lines in
Org, but it will be a single paragraph in the exported format.
#+END_QUOTE
#+BEGIN_QUOTE
Quote 2. This is a short quote.
#+END_QUOTE
#+BEGIN_QUOTE
Quote 3. This is a multi-paragraph quote.

This is the second paragraph.
#+END_QUOTE
Some other text.
** Example block inside quote block
:PROPERTIES:
:EXPORT_FILE_NAME: example-block-inside-quote-block
:END:
Some text.
#+BEGIN_QUOTE
Some quoted text.

    #+BEGIN_EXAMPLE
    (some-example)
    #+END_EXAMPLE
#+END_QUOTE
Some other text.
** Multiple example blocks inside quote block
:PROPERTIES:
:EXPORT_FILE_NAME: multiple-example-blocks-inside-quote-block
:END:
Some text.
#+BEGIN_QUOTE
Some quoted text.

    #+BEGIN_EXAMPLE
    (some-example)
    #+END_EXAMPLE
    #+BEGIN_EXAMPLE
    (some-other-example)
    #+END_EXAMPLE
#+END_QUOTE
Some other text.
** Source block inside quote block, followed by another source block outside
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-inside-quote-block-and-another-source-block
:END:
[[https://github.com/russross/blackfriday/issues/407][Blackfriday Issue # 407]]

Some text.
#+BEGIN_QUOTE
Some quoted text.
    #+BEGIN_SRC emacs-lisp
    (message "hello")
    #+END_SRC
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(message "hello again")
#+END_SRC
Some other text.
** Example blocks inside quote block, followed by another example block outside
:PROPERTIES:
:EXPORT_FILE_NAME: example-blocks-inside-quote-block-and-another-example-block
:END:
[[https://github.com/russross/blackfriday/issues/407][Blackfriday Issue # 407]]

Some text.
#+BEGIN_QUOTE
Some quoted text.
    #+BEGIN_EXAMPLE
    (some-example)
    #+END_EXAMPLE
    #+BEGIN_EXAMPLE
    (some-other-example)
    #+END_EXAMPLE
#+END_QUOTE

#+BEGIN_EXAMPLE
(yet-another-example)
#+END_EXAMPLE
Some other text.
** Source block, followed by a quote block containing another source block
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-followed-by-a-quote-block-containing-another-source-block
:END:
Some text.
#+BEGIN_SRC emacs-lisp
(message "hello")
#+END_SRC
#+BEGIN_QUOTE
Some quoted text.
    #+BEGIN_SRC emacs-lisp
    (message "hello again")
    #+END_SRC
#+END_QUOTE
Some other text.
** Example block with escaped Org syntax inside quote block
:PROPERTIES:
:EXPORT_FILE_NAME: example-block-with-escaped-org-inside-quote-block
:END:
Some text.
#+BEGIN_QUOTE
Some quoted text.

    #+BEGIN_EXAMPLE
    ,#+NAME: some_example
    (some-example)
    #+END_EXAMPLE
#+END_QUOTE
Some other text.
* Verse                                                               :verse:
** One verse
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: one-verse
:END:
To preserve the line breaks, indentation and blank lines in a region,
but otherwise use normal formatting, you can use the /verse/
construct, which can also be used to format poetry -- [[http://orgmode.org/manual/Paragraphs.html][Reference]].
#+BEGIN_VERSE
Great clouds overhead
Tiny black birds rise and fall
Snow covers Emacs

    -- AlexSchroeder
#+END_VERSE
** Consecutive verses
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: consecutive-verses
:END:
#+BEGIN_VERSE
Tyger Tyger, burning bright,
In the forests of the night;
What immortal hand or eye,
Could frame thy fearful symmetry?

In what distant deeps or skies.
Burnt the fire of thine eyes?
On what wings dare he aspire?
What the hand, dare seize the fire?

   -- "The Tyger" /by/ William Blake
#+END_VERSE
#+BEGIN_VERSE
Some parts can be *bold*
  Some can be =monospace=
    Some can be /italic/ too.
#+END_VERSE
#+BEGIN_VERSE
What is this life if, full of care,
We have no time to stand and stare.

No time to stand beneath the boughs
And stare as long as sheep or cows.

No time to see, when woods we pass,
Where squirrels hide their nuts in grass.

   -- "Leisure" /by/ William Henry Davis
#+END_VERSE
** Verse for indentation
:PROPERTIES:
:EXPORT_FILE_NAME: verse-for-indentation
:END:
Some text before indented text.
#+BEGIN_VERSE
>    Text indented by 4 spaces
#+END_VERSE
Org removes indentation from the first line of the text block even in
a Verse block. To get around that, the trick is to use the =>=
character before the required indentation spaces *only* on the first
non-blank line in a Verse block. Only that first =>= character is
removed when translating to Markdown.
*** More examples
- More indentation than in the above example:
  #+BEGIN_VERSE
>        Text indented by 8 spaces
#+END_VERSE
- Leading blank line followed by indented text:
  #+BEGIN_VERSE

>    Text indented by 4 spaces
#+END_VERSE
- Indented text followed by a trailing blank line:
  #+BEGIN_VERSE
>    Text indented by 4 spaces

#+END_VERSE
- Using tab characters for indentation; each tab character still
  constitutes for one =&nbsp;= in HTML.
  #+BEGIN_VERSE
>				Text indented by 4 tab characters
#+END_VERSE
*** Corner cases
Only the *first* =>= character immediately following spaces and empty
lines will be removed:
#+BEGIN_VERSE

>Line 1 above was empty. So the first =>= seen on this line is removed.
Line 3 had no =>= char.
> ← See that this =>= on line 4 is retained even at the beginning of the line.
Line 5 has this > charcter in-between and is retained.
#+END_VERSE

If someone really wants to have =>= as the first non-blank character
in the final output, they can use =>>= instead.. *only for that first
instance*. The below Verse block is same as above except that the
first =>= is retained in the final output.
#+BEGIN_VERSE

>>Line 1 above was empty. So *only* the first =>= seen on this line is removed.
Line 3 had no =>= char.
> ← See that this =>= on line 4 is retained even at the beginning of the line.
Line 5 has this > charcter in-between and is retained.
#+END_VERSE
* Org TODO keywords                                                    :todo:
** Post with a TODO heading
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-todo
:END:
*** Heading 1
Some text.
*** TODO Heading 2
Some text.
** Post with a DONE heading
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-done
:END:
*** Heading 1
Some text.
*** DONE Heading 2
CLOSED: [2017-08-09 Wed 16:15]
Some text.
* Blackfriday Options                                           :blackfriday:
** Fractions
*** Fraction Table
:PROPERTIES:
:CUSTOM_ID: fraction-table
:END:
|------+------+------+------+------+------+------+------+------+-------+-------+-------+-------|
| /1   | /2   | /3   | /4   | /5   | /6   | /7   | /8   | /9   | /10   | /11   | /12   | /13   |
|------+------+------+------+------+------+------+------+------+-------+-------+-------+-------|
| 1/1  |      | 1/3  |      | 1/5  | 1/6  | 1/7  | 1/8  | 1/9  | 1/10  | 1/11  | 1/12  | 1/13  |
| 2/1  | 2/2  | 2/3  | 2/4  | 2/5  | 2/6  | 2/7  | 2/8  | 2/9  | 2/10  | 2/11  | 2/12  | 2/13  |
| 3/1  | 3/2  | 3/3  |      | 3/5  | 3/6  | 3/7  | 3/8  | 3/9  | 3/10  | 3/11  | 3/12  | 3/13  |
| 4/1  | 4/2  | 4/3  | 4/4  | 4/5  | 4/6  | 4/7  | 4/8  | 4/9  | 4/10  | 4/11  | 4/12  | 4/13  |
| 5/1  | 5/2  | 5/3  | 5/4  | 5/5  | 5/6  | 5/7  | 5/8  | 5/9  | 5/10  | 5/11  | 5/12  | 5/13  |
| 6/1  | 6/2  | 6/3  | 6/4  | 6/5  | 6/6  | 6/7  | 6/8  | 6/9  | 6/10  | 6/11  | 6/12  | 6/13  |
| 7/1  | 7/2  | 7/3  | 7/4  | 7/5  | 7/6  | 7/7  | 7/8  | 7/9  | 7/10  | 7/11  | 7/12  | 7/13  |
| 8/1  | 8/2  | 8/3  | 8/4  | 8/5  | 8/6  | 8/7  | 8/8  | 8/9  | 8/10  | 8/11  | 8/12  | 8/13  |
| 9/1  | 9/2  | 9/3  | 9/4  | 9/5  | 9/6  | 9/7  | 9/8  | 9/9  | 9/10  | 9/11  | 9/12  | 9/13  |
| 10/1 | 10/2 | 10/3 | 10/4 | 10/5 | 10/6 | 10/7 | 10/8 | 10/9 | 10/10 | 10/11 | 10/12 | 10/13 |
| 11/1 | 11/2 | 11/3 | 11/4 | 11/5 | 11/6 | 11/7 | 11/8 | 11/9 | 11/10 | 11/11 | 11/12 | 11/13 |
| 12/1 | 12/2 | 12/3 | 12/4 | 12/5 | 12/6 | 12/7 | 12/8 | 12/9 | 12/10 | 12/11 | 12/12 | 12/13 |
| 13/1 | 13/2 | 13/3 | 13/4 | 13/5 | 13/6 | 13/7 | 13/8 | 13/9 | 13/10 | 13/11 | 13/12 | 13/13 |
|------+------+------+------+------+------+------+------+------+-------+-------+-------+-------|
*** Blackfriday fractions false
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-fractions-false
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :fractions nil
:END:
A Blackfriday option can be disabled by setting the option value to
/nothing/, =nil= or =false=.

These will not be rendered as fractions:
#+INCLUDE: "./all-posts.org::#fraction-table" :only-contents t

But these will always be rendered as fractions, even when the
Blackfriday =fractions= option is set to =false= like in this post.
- 1/2, 1/4, 3/4
*** Blackfriday fractions true
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-fractions-true
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :fractions t
:END:
A Blackfriday option can be enabled by setting the option value to
=t= or =true=.

All of these will be rendered as fractions:
#+INCLUDE: "./all-posts.org::#fraction-table" :only-contents t

Below are special as they will *always* be rendered as fractions, even
when the Blackfriday =fractions= option is set to =false= (though this
post has that option set to =true= -- which is also the default value).
- 1/2, 1/4, 3/4
** Extensions
*** Hard line break wrong case (TOML)                                  :toml:
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-ext-hardlinebreak-wrong-case-toml
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardlinebreak
:END:
The Blackfriday =hardLineBreak= extension is enabled here even where
user used the wrong case in the extension name:
#+BEGIN_EXAMPLE
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardlinebreak
#+END_EXAMPLE
instead of:
#+BEGIN_EXAMPLE
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardLineBreak
#+END_EXAMPLE

The Blackfriday extension names are case-sensitive. So even though,
the wrong case is used in the Org property drawer, =ox-hugo= ensures
that the Markdown front matter is written in the correct case!
:raised_hands:.

a
b
c

Above, /a/, /b/ and /c/ must appear on separate lines.
*** Hard line break (TOML)                                             :toml:
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-ext-hardlinebreak-wrong-case-toml
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardLineBreak
:END:
a
b
c

Above, /a/, /b/ and /c/ must appear on separate lines.
*** Hard line break (YAML)                                             :yaml:
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-ext-hardlinebreak-wrong-case-toml
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardLineBreak
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:END:
a
b
c

Above, /a/, /b/ and /c/ must appear on separate lines.
*** Enabling/Disabling extensions
:PROPERTIES:
:EXPORT_HUGO_BLACKFRIDAY: :smartdashes :fractions nil :plainidanchors false
:EXPORT_HUGO_BLACKFRIDAY+: :angledquotes t :hrefTargetBlank true
:EXPORT_HUGO_BLACKFRIDAY+: :extensions tabsizeeight hardlinebreak
:EXPORT_HUGO_BLACKFRIDAY+: :extensionsmask fencedcode strikethrough
:END:
**** Enabling/Disabling extensions example
:PROPERTIES:
:CUSTOM_ID: enabling-disabling-extensions-example
:END:
- Extensions enabled :: =tabSizeEight=, =hardLineBreak=
- Extensions disabled :: =fencedCode=, =strikethrough=
***** Angled quotes enabled
"this"
***** Hard line break enabled
a
b
c
***** Plain ID Anchors disabled
Check the ID for all the headings in this post's HTML. The ID's will
look something like:
#+BEGIN_SRC html
<h2 id="plain-id-anchors-disabled:c94b2acd735ed6a466ef85be48bdea8c">Plain ID Anchors disabled</h2>
#+END_SRC
where =:c94b2acd735ed6a466ef85be48bdea8c= is the document ID.
***** Fractions disabled
2/5
***** Smart dashes disabled
a--b	c--d
***** Fenced code disabled
Below, the code block language name will show up before the code.
#+BEGIN_SRC emacs-lisp
(message "Hello")
#+END_SRC
***** Strikethrough disabled
+not-canceled+
**** Enabling/Disabling extensions (TOML)                              :toml:
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-ext-enabling-disabling-toml
:EXPORT_DATE: 2017-08-02
:END:
#+INCLUDE: "./all-posts.org::#enabling-disabling-extensions-example" :only-contents t
**** Enabling/Disabling extensions (YAML)                              :yaml:
:PROPERTIES:
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:EXPORT_FILE_NAME: blackfriday-ext-enabling-disabling-yaml
:EXPORT_DATE: 2017-08-02
:END:
#+INCLUDE: "./all-posts.org::#enabling-disabling-extensions-example" :only-contents t
* Post Weight (Not the menu item weight)                             :weight:
** Auto post-weight calculation
:PROPERTIES:
:EXPORT_HUGO_WEIGHT: auto
:END:
*** Post with auto weight calc 1 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-1
:END:
*** Post with auto weight calc 2 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-2
:END:
*** Post with auto weight calc 3 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-3
:END:
*** Post with auto weight calc 4 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-4
:END:
*** Post with auto weight calc 5 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-5
:END:
** Manually specified post weights
*** Post with weight 123
:PROPERTIES:
:EXPORT_HUGO_WEIGHT: 123
:EXPORT_FILE_NAME: hugo-post-weight-123
:END:
*** Post with weight 4567
:PROPERTIES:
:EXPORT_HUGO_WEIGHT: 4567
:EXPORT_FILE_NAME: hugo-post-weight-4567
:END:
* DONE Parsing date from CLOSED property :post_heading_followed_soon_with_subheading:
CLOSED: [2017-09-11 Mon 14:32]
:PROPERTIES:
:EXPORT_FILE_NAME: parsing-date-from-closed-property
:END:
** The "CLOSED" state of this heading (which is nil) should be ignored
When an Org TODO item is switched to the =DONE= state, a =CLOSED=
property is auto-inserted (default behavior).

If such a property is non-nil, the value (time-stamp) of that is used
to set the =date= field in the exported front-matter.

- Reference :: [[http://orgmode.org/manual/Special-properties.html][(org) Special properties]] or =C-h i g (org) Special properties=
* Date Formats                                                         :date:
** Just date
:PROPERTIES:
:EXPORT_FILE_NAME: date-just-date
:EXPORT_DATE: 2017-09-12
:END:
** Date + Time
:PROPERTIES:
:EXPORT_FILE_NAME: date-plus-time
:EXPORT_DATE: 2017-09-12T16:10:00
:END:
** Date + Time (UTC)
:PROPERTIES:
:EXPORT_FILE_NAME: date-plus-time-utc
:EXPORT_DATE: 2017-09-12T16:10:00Z
:END:
** Date + Time (behind UTC)
:PROPERTIES:
:EXPORT_FILE_NAME: date-plus-time-minus-utc
:EXPORT_DATE: 2017-09-12T16:10:00-04:00
:END:
** Date + Time (after UTC)
:PROPERTIES:
:EXPORT_FILE_NAME: date-plus-time-plus-utc
:EXPORT_DATE: 2017-09-12T16:10:00+05:30
:END:
* Preserve filling option                                           :filling:
** Filling is preserved
:PROPERTIES:
:EXPORT_FILE_NAME: filling-is-preserved
:EXPORT_HUGO_PRESERVE_FILLING: t
:END:
abc
def
ghi
** Filling is not preserved
:PROPERTIES:
:EXPORT_FILE_NAME: filling-is-not-preserved
:EXPORT_HUGO_PRESERVE_FILLING:
:END:
abc
def
ghi
* Export Settings                                           :export_settings:
** Sub/superscripts require braces
:PROPERTIES:
:EXPORT_FILE_NAME: sub-superscripts-require-braces
:END:
*** Following text will export =_= and =^= verbatim
a_b a_bc a^b a^bc
*** Following text will export =_{..}= as subscript and =^{..}= as superscript
a_{b} a_{bc} a^{b} a^{bc}
** Sub/superscripts don't require braces
:PROPERTIES:
:EXPORT_FILE_NAME: sub-superscripts-dont-require-braces
:EXPORT_OPTIONS: ^:t
:END:
*** Following text will export =_..= as subscript and =^..= as superscript
a_b a_bc a^b a^bc
*** Following text will export =_{..}= as subscript and =^{..}= as superscript
a_{b} a_{bc} a^{b} a^{bc}
* Section Inheritance                                   :section_inheritance:
** Section A
:PROPERTIES:
:EXPORT_HUGO_SECTION: section-a
:END:
*** Post A1
:PROPERTIES:
:EXPORT_FILE_NAME: post-a1
:END:
This post should be created in =content/section-a/=.
*** Category X                                                       :@cat_x:
**** Post AX
:PROPERTIES:
:EXPORT_FILE_NAME: post-ax
:END:
This post should also be created in =content/section-a/=.
* Keywords                                                          :keyword:
** TOC                                                                  :toc:
*** Post with TOC using keyword set to 0
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-toc-keyword-0
:END:
#+TOC: headlines 0
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
*** Post with TOC using keyword set to 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-toc-keyword-2
:END:
#+TOC: headlines 2
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
*** Post with TOC using keyword set to 6
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-toc-keyword-6
:END:
#+TOC: headlines 6
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
* Export Options                                              :export_option:
** Table of Contents (TOC)                                              :toc:
=ox-hugo= has the =with-toc= option disabled by default as Hugo has an
inbuilt TOC generation feature.

Still some people might prefer to use the Org generated TOC.
*** Section Numbers                                                     :num:
**** Don't number headlines or TOC
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-nil
:EXPORT_OPTIONS: num:nil
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** Don't number headlines (but yes in TOC)
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-onlytoc
:EXPORT_OPTIONS: num:onlytoc
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** Number 0 levels
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-0
:EXPORT_OPTIONS: num:0
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** Number 2 levels
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-2
:EXPORT_OPTIONS: num:2
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** Number all levels
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-all
:EXPORT_OPTIONS: num:t
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
*** TOC
**** =num= set to =nil=
***** TOC with all headings (unnumbered)
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-t-num-nil
:EXPORT_OPTIONS: num:nil toc:t
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** TOC with headings (unnumbered) only till level 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-2-num-nil
:EXPORT_OPTIONS: num:nil toc:2
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** No TOC as toc set to nil
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-nil-num-nil
:EXPORT_OPTIONS: num:nil toc:nil
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** =num= set to =t=
***** TOC with all headings (numbered, except for selected unnumbered)
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-t-num-t
:EXPORT_OPTIONS: num:t toc:t
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** TOC with headings (numbered, except for selected unnumbered) only till level 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-2-num-t
:EXPORT_OPTIONS: num:t toc:2
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** No TOC as toc set to 0
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-0-num-t
:EXPORT_OPTIONS: num:t toc:0
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** =num= set to =onlytoc=
***** TOC with all headings (post-unnumbered, TOC-numbered)
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-t-num-onlytoc
:EXPORT_OPTIONS: num:onlytoc toc:t
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** TOC with headings (post-unnumbered, TOC-numbered) only till level 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-1-num-onlytoc
:EXPORT_OPTIONS: num:onlytoc toc:1
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** No TOC in Summary
:PROPERTIES:
:EXPORT_FILE_NAME: no-toc-in-summary
:EXPORT_OPTIONS: toc:t
:END:
By default, Hugo will dump everything at the beginning of a post into
its =.Summary= (See [[https://gohugo.io/content-management/summaries/][Hugo content summaries]]). As TOC enabled using the
export option like =toc:t= is inserted at the beginning of a post, TOC
will be shown in that summary too!

#+HUGO: more

***** =ox-hugo='s Solution
=ox-hugo= helps prevent that with a workaround.. it inserts a special
HTML comment *=<!--endtoc-->=* after the TOC.

It is important to insert a user-defined summary split by using
=#+HUGO: more=. Otherwise it is very likely that the TOC is big enough
to exceed the Hugo-defined max-summary length and so the
=<!--endtoc-->= that appears *after* the TOC never gets parsed.

#+BEGIN_QUOTE
*Always use =#+HUGO: more= when you enable Org generated TOC's.*
#+END_QUOTE

In your site's Hugo template, you can then filter that out with
something like:
***** Snippet
#+BEGIN_SRC html
{{ $summary_splits := split .Summary "<!--endtoc-->" }}
{{ if eq (len $summary_splits) 2 }}
    <!-- If that endtoc special comment is present, output only the part after that comment as Summary. -->
    {{ index $summary_splits 1 | safeHTML }}
{{ else }}
    <!-- Print the whole Summary if endtoc special comment is not found. -->
    {{ .Summary }}
{{ end }}
#+END_SRC
***** Example
See this test site's [[https://github.com/kaushalmodi/ox-hugo/blob/master/test/site/themes/bare_min/layouts/_default/summary.html][=summary.html=]] as an example.
* Hugo Aliases                                                      :aliases:
** Alias without section portion 1
:PROPERTIES:
:EXPORT_FILE_NAME: alias-without-section-1
:EXPORT_HUGO_ALIASES: alias-a
:END:
As the specified alias does not contain the "/" string, it will be
auto-prefixed with the section for the current post.
** New section just for test
:PROPERTIES:
:EXPORT_HUGO_SECTION: alias-test
:END:
*** Alias without section portion 2
:PROPERTIES:
:EXPORT_FILE_NAME: alias-without-section-2
:EXPORT_HUGO_ALIASES: alias-b
:END:
As the specified alias does not contain the "/" string, it will be
auto-prefixed with the section for the current post.
** Alias specifying a different section
:PROPERTIES:
:EXPORT_FILE_NAME: alias-different-section
:EXPORT_HUGO_ALIASES: /alias-test/alias-c
:END:
** Alias specifying root section
:PROPERTIES:
:EXPORT_FILE_NAME: alias-root-section
:EXPORT_HUGO_ALIASES: /alias-d
:END:
** Multiple aliases without section portion
:PROPERTIES:
:EXPORT_FILE_NAME: alias-multiple-without-section
:EXPORT_HUGO_ALIASES: alias-e alias-f
:END:
** Multiple aliases with section portion
:PROPERTIES:
:EXPORT_FILE_NAME: alias-multiple-with-section
:EXPORT_HUGO_ALIASES: /alias-test/alias-g /alias-test/alias-h
:END:
* Real Examples                                               :real_examples:
:PROPERTIES:
:EXPORT_HUGO_SECTION: real-examples
:END:
** DONE Multifractals in ecology using R                     :math:equations:
:PROPERTIES:
:EXPORT_FILE_NAME: multifractals-in-ecology-using-r
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :author Leonardo A. Saravia
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/lsaravia/MultifractalsInR/blob/master/Curso3.md
:EXPORT_DATE: 2017-11-28T10:48:00-05:00
:END:
- Disclaimer :: This post is from the [[https://github.com/lsaravia/MultifractalsInR/blob/master/Curso3.md][link]] posted by GitHub user
                [[https://github.com/lsaravia][*lsaravia*]] in [[https://github.com/gohugoio/hugo/issues/234#issuecomment-347532166][this comment]]. All credits for this post
                go to the original author.
-----
[[file:/images/MultifractalsInR/fractal-ice.jpg]]
*** Multifractals
- Many natural systems cannot be characterized by a single number such
  as the fractal dimension. Instead an infinite spectrum of dimensions
  must be introduced.
  [[file:/images/MultifractalsInR/C3_Clouds.png]]
*** Multifractal definition
- Consider a given object $\Omega$, its multifractal nature is
  practically determined by covering the system with a set of boxes
  $\{B_i(r)\}$ with $(i=1,..., N(r))$ of side lenght $r$
- These boxes are nonoverlaping and such that

  $$\Omega = \bigcup_{i=1}^{N(r)} B_i(r)$$

  This is the box-counting method but now a measure $\mu(B_n)$ for each
  box is computed. This measure corresponds to the total population or
  biomass contained in $B_n$, in general will scale as:

  $$\mu(B_n) \propto r^\alpha$$
*** Box counting
[[file:/images/MultifractalsInR/C3_BoxCounting.png]]
*** The generalized dimensions
- The fractal dimension $D$ already defined is actually one of an
  infinite spectrum of so-called correlation dimension of order $q$ or
  also called Renyi entropies.

  $$D_q = \lim_{r \to 0} \frac{1}{q-1}\frac{log \left[ \sum_{i=1}^{N(r)}p_i^q \right]}{\log r}$$

  where $p_i=\mu(B_i)$ and a normalization is assumed:

  $$\sum_{i=1}^{N(r)}p_i=1$$

- For $q=0$ we have the familiar definition of fractal dimension. To see
  this we replace $q=0$

  $$D_0 = -\lim_{r \to 0}\frac{N(r)}{\log r}$$
*** Generalized dimensions 1
- It can be shown that the inequality $D_q' \leq D_q$ holds for
  $q' \geq q$
- The sum

  $$M_q(r) = \sum_{i=1}^{N(r)}[\mu(B_i(r))]^q = \sum_{i=1}^{N(r)}p_i^q$$

  is the so-called moment or partition function of order $q$.
- Varying q allows to measure the non-homogeneity of the pattern. The
  moments with larger $q$ will be dominated by the densest boxes. For
  $q<0$ will come from small $p_i$'s.
- Alternatively we can think that for $q>0$, $D_q$ reflects the scaling
  of the large fluctuations and strong singularities. In contrast, for
  $q<0$, $D_q$ reflects the scaling of the small fluctuations and weak
  singularities.
*** Exercise
- Calculate the partition function for the center and lower images of
  the figure:
  [[file:/images/MultifractalsInR/C3_BoxCounting.png]]
*** Two important dimensions
- Two particular cases are $q=1$ and $q=2$. The dimension for $q=1$ is
  the Shannon entropy or also called by ecologist the Shannon's index of
  diversity.

  $$D_1 = -\lim_{r \to 0}\sum_{i=1}^{N(r)} p_i \log p_i$$

  and the second is the so-called correlation dimension:

  $$D_2 = -\lim_{r \to 0} \frac{\log \left[ \sum_{i=1}^{N(r)} p_i^2 \right]}{\log r} $$

  the numerator is the log of the Simpson index.
*** Application
- Salinity stress in the cladoceran Daphniopsis Australis. Behavioral
  experiments were conducted on individual males, and their successive
  displacements analyzed using the generalized dimension function $D_q$
  and the mass exponent function $\tau_q$
  [[file:/images/MultifractalsInR/C3_Cladoceran.png]]
  both functions indicate that the successive displacements of male D.
  australis have weaker multifractal properties. This is consistent with
  and generalizes previous results showing a decrease in the complexity
  of behavioral sequences under stressful conditions for a range of
  organisms.
- A shift between multifractal and fractal properties or a change in
  multifractal properties, in animal behavior is then suggested as a
  potential diagnostic tool to assess animal stress levels and health.
*** Mass exponent and Hurst exponent
- The same information contained in the generalized dimensions can be
  expressed using mass exponents:

  $$M_q(r) \propto r^{-\tau_q}$$

  This is the scaling of the partition function. For monofractals
  $\tau_q$ is linear and related to the Hurst exponent:

  $$\tau_q = q H - 1$$

  For multifractals we have

  $$\tau_q = (q -1) D_q$$

  Note that for $q=0$, $D_q = \tau_q$ and for $q=1$, $\tau_q=0$
*** Paper
1. Kellner JR, Asner GP (2009) Convergent structural responses of
   tropical forests to diverse disturbance regimes. Ecology Letters 12:
   887--897. doi:10.1111/j.1461-0248.2009.01345.x.
* TODO Pre-Draft State
:PROPERTIES:
:EXPORT_FILE_NAME: draft-state-todo
:EXPORT_DATE: 2017-07-12T17:05:41-04:00
:END:
If a post has the =TODO= keyword, the =draft= front matter variable
should be set to =true=.

Idea to to mark a post or blog idea as =TODO= that you yet have to
start writing.
* DRAFT Draft state
:PROPERTIES:
:EXPORT_FILE_NAME: draft-state-draft
:EXPORT_DATE: 2017-07-12T13:46:16-04:00
:END:
If a post has the =DRAFT= keyword too, the =draft= front matter variable
should be set to =true=.

Idea is to mark a post as =DRAFT= that you have already started
writing, or are in the process at the moment, but it is not yet ready
to be published
* DRAFT Draft state with other headlines :post_heading_followed_soon_with_subheading:
:PROPERTIES:
:EXPORT_FILE_NAME: draft-state-other-headings-draft
:EXPORT_DATE: 2017-07-12T13:46:16-04:00
:END:
** The "TODO" state of this heading (which is nil) should be ignored
If a post has the =DRAFT= state set, the =draft= front matter variable
should be set to =true=, even if the post has a sub-heading
immediately after the post heading.
* Reusable sections                                        :noexport:ARCHIVE:
** Nested sections example
:PROPERTIES:
:CUSTOM_ID: nested-sections-example
:END:
*** Post sub-heading 1
**** Post sub-heading 1.1
***** Post sub-heading 1.1.1
**** Post sub-heading 1.2
**** Post sub-heading 1.3
*** Post sub-heading 2
**** Post sub-heading 2.1
**** Post sub-heading 2.2
***** Post sub-heading 2.2.1
***** Post sub-heading 2.2.2
:PROPERTIES:
:UNNUMBERED: t
:END:
The =UNNUMBERED= property for this subtree is set to =t=. So this
heading will show up as unnumbered in both the post body and the TOC.
***** Post sub-heading 2.2.3
*** Post sub-heading 3
**** Post sub-heading 3.1
** Example text with code blocks
:PROPERTIES:
:CUSTOM_ID: example-text-with-code-blocks
:END:
Here are few variables that you might like to change in the =local.mk=:
- =prefix= :: Org installation directory
  #+BEGIN_SRC makefile
  prefix = /dir/where/you/want/to/install/org # Default: /usr/share
  #+END_SRC
  The =.el= files will go to =$(prefix)/emacs/site-lisp/org= by
              default. If you'd like to change that, you can tweak the
              =lispdir= variable.
- =infodir= :: Org Info installation directory. I like to keep the
                   Info file for development version of Org in a separate
                   directory.
  #+BEGIN_SRC makefile
  infodir = $(prefix)/org/info # Default: $(prefix)/info
  #+END_SRC
- =ORG_MAKE_DOC= :: Types of Org documentation you'd like to build by
                    default.
  #+BEGIN_SRC makefile
  # Define below you only need info documentation, the default includes html and pdf
  ORG_MAKE_DOC = info pdf card # html
  #+END_SRC
- =ORG_ADD_CONTRIB= :: Packages from the =contrib/= directory that
     you'd like to build along with Org. Below are the ones on my
     /must-have/ list.
  #+BEGIN_SRC makefile
  # Define if you want to include some (or all) files from contrib/lisp
  # just the filename please (no path prefix, no .el suffix), maybe with globbing
  #   org-eldoc - Headline breadcrumb trail in minibuffer
  #   ox-extra - Allow ignoring just the heading, but still export the body of those headings
  #   org-mime - Convert org buffer to htmlized format for email
  ORG_ADD_CONTRIB = org-eldoc ox-extra org-mime
  #+END_SRC

Here's an example of an =emacs-lisp= block:
#+BEGIN_SRC emacs-lisp
(defvar emacs-version-short (format "%s_%s"
                                    emacs-major-version emacs-minor-version)
  "A variable to store the current emacs versions as <MAJORVER>_<MINORVER>.
So, for emacs version 25.0.50.1, this variable will be 25_0.")
#+END_SRC
** Source block with line numbers examples
:PROPERTIES:
:CUSTOM_ID: source-block-with-line-numbers-examples
:END:
#+BEGIN_SRC org :noweb-ref src-block-n-default-start
,#+BEGIN_SRC emacs-lisp -n
;; this will export with line number 1 (default)
(message "This is line 2")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-n-custom-start
,#+BEGIN_SRC emacs-lisp -n 20
;; this will export with line number 20
(message "This is line 21")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-n-default-continue
,#+BEGIN_SRC emacs-lisp +n
;; This will be listed as line 22
(message "This is line 23")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-n-custom-continue
,#+BEGIN_SRC emacs-lisp +n 10
;; This will be listed as line 33
(message "This is line 34")
,#+END_SRC
#+END_SRC
** Source block with line highlighting examples
:PROPERTIES:
:CUSTOM_ID: source-block-with-line-highlighting-examples
:END:
#+BEGIN_SRC org :noweb-ref src-block-hl-without-n
,#+BEGIN_SRC emacs-lisp :hl_lines 1,3-5
(message "This is line 1")
(message "This is line 2")
(message "This is line 3")
(message "This is line 4")
(message "This is line 5")
(message "This is line 6")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-hl-with-n-not-1
,#+BEGIN_SRC emacs-lisp -n 7 :hl_lines 1,3-5
(message "This is line 7 in code, but line 1 for highlighting reference")
(message "This is line 8 in code, but line 2 for highlighting reference")
(message "This is line 9 in code, but line 3 for highlighting reference")
(message "This is line 10 in code, but line 4 for highlighting reference")
(message "This is line 11 in code, but line 5 for highlighting reference")
(message "This is line 12 in code, but line 6 for highlighting reference")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-hl-with-n
,#+BEGIN_SRC emacs-lisp -n :hl_lines 1,3-5
(message "This is line 1")
(message "This is line 2")
(message "This is line 3")
(message "This is line 4")
(message "This is line 5")
(message "This is line 6")
,#+END_SRC
#+END_SRC
** Lorem Ipsum
:PROPERTIES:
:CUSTOM_ID: lorem-ipsum
:END:
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque et
quam metus. Etiam in iaculis mi, sit amet pretium magna. Donec ut dui
mi. Maecenas pharetra sapien nunc, ut mollis enim aliquam quis. Nam at
ultricies metus. Nulla tempor augue in vestibulum tristique. Phasellus
volutpat pharetra metus quis suscipit. Morbi maximus sem dolor, id
accumsan ipsum commodo non.

Fusce quam ligula, gravida ac dui venenatis, bibendum commodo
lorem. Duis id elit turpis. Integer sed diam nibh. Donec tempus
lacinia odio, a laoreet velit dictum id. Suspendisse efficitur euismod
purus et porttitor. Aliquam sit amet tellus mauris. Mauris semper
dignissim nibh, faucibus vestibulum purus varius quis. Suspendisse
potenti. Cras at ligula sit amet nunc vehicula condimentum quis nec
est. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices
posuere cubilia Curae; Donec iaculis, neque sit amet maximus rhoncus,
nisl tortor convallis ante, ut mollis purus augue ut justo. Praesent
felis urna, volutpat sit amet posuere dictum, luctus quis nibh. Proin
et tristique ipsum, in aliquam ante.

Aenean eget ex mauris. Cras ut tempor quam. Curabitur eget nulla
laoreet, bibendum neque porta, tempus nulla. Ut tellus nisi, semper eu
ligula pretium, aliquam accumsan dolor. Nunc fermentum cursus arcu eu
suscipit. Nam dolor tellus, efficitur sed condimentum at, fringilla
eget nisi. Nulla luctus metus felis. Suspendisse potenti. Cras lacinia
orci nec dui sodales commodo. Donec tellus arcu, congue porta ultrices
non, pretium et sapien. Proin mattis risus dignissim feugiat
tristique. Donec nibh lorem, facilisis id posuere ut, varius ac
urna. Etiam ultrices dignissim mauris, quis venenatis ex semper ut.

Curabitur id fermentum erat, rhoncus scelerisque est. Sed pulvinar,
nulla sed sollicitudin scelerisque, ipsum erat sollicitudin dolor, ut
commodo arcu justo vel libero. Curabitur turpis dolor, fermentum ut
elit a, vehicula commodo nunc. Sed sit amet blandit nulla, quis
sodales massa. Donec lobortis, urna vel volutpat ullamcorper, mauris
est efficitur nulla, et suscipit velit dui at metus. Aliquam id sem
sed metus tristique scelerisque nec vitae odio. Phasellus a
pellentesque libero, vel convallis metus. Sed nec fringilla magna, non
varius ex. Sed interdum eleifend ligula, quis porta enim ultrices
a. Donec hendrerit diam ac elementum tincidunt.

Pellentesque eget nisl rhoncus, malesuada justo nec, suscipit
quam. Nam sodales mauris eu bibendum suscipit. Vivamus sodales dui
lorem, scelerisque pellentesque diam fermentum sed. Etiam fermentum
nisl id nisl blandit, sit amet semper erat ultricies. Nulla tincidunt
nulla metus, eu imperdiet lorem malesuada sagittis. Maecenas accumsan
risus sed ante eleifend, vitae pretium leo porta. Suspendisse vitae
eros vitae dui ornare condimentum id sit amet mauris. Etiam tincidunt
consequat risus, eu posuere mi. Donec ut nunc eu massa porttitor
suscipit nec nec neque. Suspendisse vitae tincidunt justo, sed
molestie velit. Nullam pellentesque convallis ante, vel posuere libero
blandit in.
# a comment forces paragraph break in Org
* Footnotes
[fn:4] Even if the user has set the =HUGO_CODE_FENCE= value to =t=
(via variable, keyword or subtree property), the Hugo =highlight=
shortcode will be used automatically instead of code fences if either
(i) the user has chosen to either show the line numbers, or (ii) has
chosen to highlight lines of code (See the =ox-hugo= documentation on
{{{doc(source-blocks,Source Blocks)}}}).

[fn:3] This is a long footnote. It is so long that it gets auto-filled
over multiple lines. But even then it should be handled fine.

[fn:2] Second footnote

[fn:1] First footnote
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# fill-column: 70
# eval: (auto-fill-mode 1)
# End:
